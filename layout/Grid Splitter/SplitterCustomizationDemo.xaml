<democommon:DemoControl
    x:Class="syncfusion.layoutdemos.wpf.SplitterCustomizationDemo"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:democommon="clr-namespace:syncfusion.demoscommon.wpf;assembly=syncfusion.demoscommon.wpf"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
    mc:Ignorable="d">
    <democommon:DemoControl.Resources>
        <DataTemplate x:Key="GripperTemplate">
            <Border BorderThickness="0,1,0,0" />
        </DataTemplate>
        <Style x:Key="ArrowPath" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M16.261993,11.306006L16.360016,11.342994 16.455017,11.306006 16.490021,11.394019 32,17.772014 32,22.61 16.360016,16.180003 0,22.61 0,17.772014 16.22702,11.394019z M16.261993,0L16.360016,0.036987304 16.455017,0 16.490021,0.088012694 32,6.4670147 32,11.306006 16.360016,4.8769869 0,11.306006 0,6.4670147 16.22702,0.088012694z" />
            <Setter Property="Stretch" Value="Fill" />
            <Setter Property="Fill" Value="#FF3E6DB5" />
            <Setter Property="Width" Value="13" />
            <Setter Property="Height" Value="16" />
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        </Style>
        <Style x:Key="RectangleStyle" TargetType="{x:Type Rectangle}">
            <Setter Property="Width" Value="25" />
            <Setter Property="Height" Value="25" />
            <Setter Property="Fill" Value="#01FFFFFF" />
            <Setter Property="Visibility" Value="Visible" />
        </Style>
        <DataTemplate x:Key="RightButtonTemplate">
            <Grid>
                <Grid Name="backgroundGrid" Visibility="Visible">
                    <Rectangle Style="{StaticResource RectangleStyle}" />
                </Grid>
                <Path Style="{StaticResource ArrowPath}">
                    <Path.RenderTransform>
                        <TransformGroup>
                            <TransformGroup.Children>
                                <RotateTransform Angle="90" />
                                <ScaleTransform ScaleX="1" ScaleY="1" />
                            </TransformGroup.Children>
                        </TransformGroup>
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="UpButtonTemplate">
            <Grid>
                <Grid Name="backgroundGrid" Visibility="Visible">
                    <Rectangle Style="{StaticResource RectangleStyle}" />
                </Grid>
                <Path Style="{StaticResource ArrowPath}">
                    <Path.RenderTransform>
                        <TransformGroup>
                            <TransformGroup.Children>
                                <RotateTransform Angle="-180" />
                                <ScaleTransform ScaleX="1" ScaleY="1" />
                            </TransformGroup.Children>
                        </TransformGroup>
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="DownButtonTemplate">
            <Grid>
                <Grid Name="backgroundGrid" Visibility="Visible">
                    <Rectangle Style="{StaticResource RectangleStyle}" />
                </Grid>
                <Path Style="{StaticResource ArrowPath}">
                    <Path.RenderTransform>
                        <TransformGroup>
                            <TransformGroup.Children>
                                <RotateTransform Angle="180" />
                                <ScaleTransform ScaleX="1" ScaleY="1" />
                            </TransformGroup.Children>
                        </TransformGroup>
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="LeftButtonTemplate">
            <Grid>
                <Grid Name="backgroundGrid" Visibility="Visible">
                    <Rectangle Style="{StaticResource RectangleStyle}" />
                </Grid>
                <Path Style="{StaticResource ArrowPath}">
                    <Path.RenderTransform>
                        <TransformGroup>
                            <TransformGroup.Children>
                                <RotateTransform Angle="-90" />
                                <ScaleTransform ScaleX="1" ScaleY="1" />
                            </TransformGroup.Children>
                        </TransformGroup>
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </DataTemplate>
    </democommon:DemoControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="auto" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <syncfusion:SfCalculator
            Grid.Row="0"
            Grid.Column="0"
            Width="250"
            Height="220"
            Margin="10" />
        <syncfusion:CalendarEdit
            x:Name="CalendarEdit"
            Grid.Row="2"
            Grid.Column="0"
            Margin="10"
            HorizontalAlignment="Center"
            VerticalAlignment="Center" />
        <TextBlock
            Grid.RowSpan="3"
            Grid.Column="2"
            Margin="10"
            Text="Neural networks are an exciting field of software development used to calculate outputs from input data. While the idea seems simple enough, the implications of such networks are staggering—think optical character recognition, speech recognition, and regression analysis. With Neural Networks Using C# Succinctly by James McCaffrey, you'll learn how to create your own neural network to solve classification problems, or problems where the outcomes can only be one of several values.  Learn about encoding and normalizing data, activation functions and how to choose the right one, and ultimately how to train a neural network to find weights and bias values that provide accurate predictions. An artificial neural network (sometimes abbreviated ANN, or shortened to just neural network when the context is clear) is a software system that loosely models biological neurons and synapses. Before explaining exactly how neural networks work, it is useful to understand what types of problems they can solve."
            TextWrapping="Wrap" />
        <syncfusion:SfGridSplitter
            Grid.Row="1"
            Grid.Column="0"
            Height="5"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Top"
            DownButtonTemplate="{StaticResource DownButtonTemplate}"
            EnableCollapseButton="True"
            HorizontalGripperTemplate="{StaticResource GripperTemplate}"
            ResizeBehavior="PreviousAndNext"
            ShowsPreview="True"
            UpButtonTemplate="{StaticResource UpButtonTemplate}" />
        <syncfusion:SfGridSplitter
            Grid.RowSpan="3"
            Grid.Column="1"
            Width="5"
            HorizontalAlignment="Left"
            VerticalAlignment="Stretch"
            EnableCollapseButton="True"
            LeftButtonTemplate="{StaticResource LeftButtonTemplate}"
            ResizeBehavior="PreviousAndNext"
            RightButtonTemplate="{StaticResource RightButtonTemplate}"
            ShowsPreview="True"
            VerticalGripperTemplate="{StaticResource GripperTemplate}" />

    </Grid>
</democommon:DemoControl>
